#!/usr/bin/env node

const { info, warn, error } = require('ara-console')
const { basename } = require('path')
const program = require('yargs')
const secrets = require('../secrets')
const crypto = require('ara-crypto')
const debug = require('debug')('ara:network:secrets')
const fs = require('fs')
const rc = require('ara-runtime-configuration')()

const $0 = basename(process.argv[1] || 'ara-network-secrets')

const { argv } = program
  .alias('help', 'h')
  .alias('version', 'V')
  .option('key', {
    type: 'string',
    alias: 'k',
    describe: "Encyrption key for keystore",
    required: true,
  })
  .option('seed', {
    type: 'string',
    alias: 's',
    describe: "Secrets seed value",
    optional: true,
  })
  .option('out', {
    type: 'string',
    alias: 'o',
    describe: "Where to write file to. Defaults to stdout.",
    optional: true,
  })
  .option('debug', {
    type: 'boolean',
    alias: 'D',
    describe: "Enable debug output"
  })

process.on('unhandledRejection', onfatal)
process.on('uncaughtException', onfatal)

void async function main() {
  const keys = {}
  process.title = $0

  if (program.argv.debug) {
    require('debug').enable('ara:network*')
  }

  const doc = secrets.encrypt(argv)

  console.error(doc.public.discoveryKey.toString('hex'))

  if (argv.out) {
    const out = {
      public: `${argv.out}.pub`,
      secret: argv.out
    }

    fs.writeFileSync(out.public, Buffer.from(JSON.stringify(doc.public)))
    fs.writeFileSync(out.secret, Buffer.from(JSON.stringify(doc.secret)))
  } else {
    console.log(JSON.stringify(doc))
  }
}()

/**
 * Handles fatal errors.
 * @private
 * @param {Error} err
 */
function onfatal(err) {
  debug(err)
  error("fatal:", err.message)
  process.exit(1)
}
