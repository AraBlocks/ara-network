#!/usr/bin/env node

const { info, warn, error } = require('ara-console')
const { basename } = require('path')
const program = require('yargs')
const crypto = require('ara-crypto')
const debug = require('debug')('ara:network:secrets')
const fs = require('fs')
const rc = require('ara-runtime-configuration')()

const $0 = basename(process.argv[1] || 'ara-network-secrets')

const { argv } = program
  .alias('help', 'h')
  .alias('version', 'V')
  .option('key', {
    type: 'string',
    alias: 'k',
    describe: "Encyrption key for keystore",
    required: true,
  })
  .option('seed', {
    type: 'string',
    alias: 's',
    describe: "Secrets seed value",
    optional: true,
  })
  .option('out', {
    type: 'string',
    alias: 'o',
    describe: "Where to write file to. Defaults to stdout.",
    optional: true,
  })
  .option('debug', {
    type: 'boolean',
    alias: 'D',
    describe: "Enable debug output"
  })

process.on('unhandledRejection', onfatal)
process.on('uncaughtException', onfatal)

void async function main() {
  const keys = {}
  process.title = $0

  if (program.argv.debug) {
    require('debug').enable('ara:network*')
  }

  keys.remote = crypto.keyPair(seed('remote'))
  keys.client = crypto.keyPair(seed('client'))
  keys.network = crypto.keyPair(keys.remote.secretKey.slice(0, 32))
  keys.discovery = crypto.discoveryKey(Buffer.alloc(32).fill(argv.key))

  const enc = encrypt()
  const json = JSON.stringify(enc)

  console.error(keys.discovery.toString('hex'))
  if (argv.out) {
    fs.writeFileSync(argv.out, Buffer.from(json))
  } else {
    console.log(json)
  }

  function seed(prefix) {
    if (argv.seed) {
      const buffer = Buffer.alloc(32)
      buffer.fill(prefix + argv.seed)
      return buffer
    }
  }

  function encrypt() {
    const DISCOVERY = 0, REMOTE = 1, CLIENT = 2, NETWORK = 3
    const keystores = [ keys.discovery ]

    push(REMOTE, keys.remote)
    push(CLIENT, keys.client)
    push(NETWORK, keys.network)

    return crypto.encrypt(Buffer.concat(keystores), {
      key: keys.discovery.slice(0, 16),
      iv: crypto.randomBytes(16),
    })

    function push(index, keyPair) {
      keystores[index] = Buffer.concat([
        keyPair.publicKey, keyPair.secretKey
      ])
    }
  }
}()

/**
 * Handles fatal errors.
 * @private
 * @param {Error} err
 */
function onfatal(err) {
  debug(err)
  error("fatal:", err.message)
  process.exit(1)
}
