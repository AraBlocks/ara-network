#!/usr/bin/env node
/* eslint-disable  import/no-dynamic-require */
/* eslint-disable global-require */

const { info, warn, error } = require('ara-console')
const { basename, resolve } = require('path')
const onBeforeExit = require('async-exit-hook')
const { fork } = require('child_process')
const program = require('yargs')
const debug = require('debug')('ara:network:node')
const pkg = require('../package.json')
const rc = require('ara-runtime-configuration')()

const booted = {}

const $0 = basename(process.argv[1] || `${pkg.name}-node`)
module.exports = { main, boot, program }

void program
  .help(false)
  .version(false)
  .group([ 'help', 'debug', 'version' ], 'General Options:')
  .alias('help', 'h')
  .alias('debug', 'D')
  .alias('version', 'V')
  .option('help', {
    describe: 'Show help',
    type: 'boolean',
  })
  .option('debug', {
    describe: 'Enable debug output',
    global: true,
    type: 'boolean',
  })
  .option('version', {
    describe: 'Show version number',
    global: false,
    type: 'boolean',
  })
  .group([ 'type', 'conf', 'restart' ], 'Configuration Options:')
  .option('type', {
    alias: 't',
    describe: 'Node type to start'
  })
  .option('conf', {
    alias: 'C',
    describe: 'Path to configuration file'
  })
  .option('restart', {
    describe: 'Restart node after exit',
    type: 'boolean',
  })

const isChildProcess =
  program.argv['child-process'] ||
  program.argv._.includes('--child-process')


// from command line
if (!module.parent) {
  process.on('unhandledRejection', onfatal)
  process.on('uncaughtException', onfatal)
  process.nextTick(main)
}

/**
 * Main program entry
 *
 * @public
 */
async function main() {
  const { t, type = t } = program.argv
  const { V, version = V } = program.argv

  process.title = $0

  if (version && !type) {
    info('%s version: %s', pkg.name, pkg.version)
    process.exit(0)
  }

  if (!type) {
    if (program.argv.help) {
      program.showHelp()
      process.exit(0)
    } else if (process.argv.length <= 2) {
      program.showHelp()
      process.exit(1)
    }
  }

  if (program.argv.debug) {
    // eslint-disable-next-line global-require
    require('debug').enable('ara:*')
  }

  if (isChildProcess) {
    process.on('message', onmessage)
  } else if (type && false === Array.isArray(type)) {
    await boot({ type })
  } else {
    warn('Multiple network node types given. Ignoring other arguments.')

    for (const k of type) {
      // eslint-disable-next-line no-await-in-loop
      await boot({ type: k })
    }
  }

  if (!isChildProcess && program.argv.restart) {
    setInterval(onheartbeat, 100)
  }
}

/**
 * Fork process and boot worker node.
 *
 * @public
 * @param {Object} opts
 * @param {Object} opts.type
 * @return {cluster.Worker}
 */

async function boot({ type }) {
  if (type in booted) {
    return booted[type]
  }

  const { env } = process
  const cwd = process.cwd()
  const argv = process.argv.slice(2).concat('--child-process')
  const argv1 = process.argv[1]
  const stdio = 'inherit'
  const worker = fork(argv1, argv, { stdio, cwd, env })
  const { pid, id = pid } = worker

  worker.on('disconnect', ondisconnect)
  worker.on('error', onerror)
  worker.on('close', onclose)
  worker.on('exit', onexit)
  worker.send({ id, type })

  booted[type] = worker

  return worker

  function onclose() {
    if (program.argv.restart) {
      warn('worker#%s: %s closed', id, type)
    }
  }

  function ondisconnect() {
    if (program.argv.restart) {
      warn('worker#%s: %s disconnected', id, type)
    }
  }

  function onerror(err) {
    error('worker#%s: %s: error:', id, type, err.message)
    if (true !== worker.connected) {
      onexit()
    }
  }

  function onexit(code, signal) {
    delete booted[type]

    if (undefined !== code && undefined !== signal) {
      if (null !== signal) {
        warn('Got signal: %s: Exiting with code %s', signal, code)
      } else {
        debug('Exiting with code: %s', code)
      }
    }

    if (program.argv.restart) {
      warn('worker#%s: %s exited', id, type)
      restart({ type })
    }
  }
}

async function restart({ type }) {
  warn('Restarting node %s', type)

  if (booted[type]) {
    booted[type].kill()
    delete booted[type]
  }

  process.nextTick(boot, { type })
}

/**
 * Worker message callback
 *
 * @private
 * @param {Object} event
 */
async function onmessage({ id, type }) {
  let node = null

  function bootnode(paths) {
    try {
      const path = paths.shift()
      const resolved = require.resolve(path, { paths: [ process.cwd() ] })
      node = require(resolved)
    } catch (err) {
      debug(err)
      if (paths.length) {
        bootnode(paths)
      } else {
        error('worker: %s: Unknown node type: %s', type, err.message)
        process.exit(1)
      }
    }
  }

  // Different places to search for the corresponding node
  bootnode([
    `ara-network-node-${type}`,
    `ara-${type}`,
    type,
    resolve(type)
  ])

  if (!node) {
    error('Unable to resolve node type \'%s\'.', type)
    process.exit(1)
  }

  const {
    getInstance,
    configure,
    start,
    stop,
  } = node

  if ('function' !== typeof start) {
    error('Node type \'%s\' is not startable (Missing \'start\' function)', type)
    process.exit(1)
  }

  if ('function' !== typeof stop) {
    error('Node type \'%s\' is not stopable (Missing \'stop\' function)', type)
    process.exit(1)
  }

  if ('function' === typeof configure) {
    const conf = {}

    if (rc.network && rc.network.node && 'object' === typeof rc.network.node[type]) {
      Object.assign(conf, rc.network.node[type])
    }

    program.usage(`usage: $0 -t ${type} [options]`).help(true)

    const promise = configure(conf, program)
    // force parse argv
    void program.argv
    info('Configuring network node \'%s\'.', type)
    await promise
  }

  const { argv } = program

  try {
    info('Starting network node \'%s\'', type)
    if (true !== await start(argv)) {
      onfatal(new Error(`Failed to start network node '${type}'`))
    }
  } catch (err) {
    debug(err)
    error('fatal: Network node \'%s\' encountered an error:', err.message)
    process.exit(1)
  }

  const instance = await getInstance(argv)
  instance.on('error', onerror)
  onBeforeExit(onexit)

  function onerror(err) {
    error('worker#%s: %s: error:', id, type, err.message)
  }

  async function onexit(done) {
    warn('Stopping network node \'%s\'', type)
    await stop(argv)
    done()
  }
}

async function onheartbeat() {
  if (program.argv.restart) {
    for (const k in booted) {
      const node = booted[k]
      if (!node || !node.connected) {
        restart({ type: k })
      }
    }
  }
}

/**
 * Handles fatal errors.
 *
 * @private
 * @param {Error} err
 */
function onfatal(err) {
  debug(err)
  error('fatal:', err.message)

  if (isChildProcess || true !== program.argv.restart) {
    process.nextTick(process.exit, 1)
  }
}
